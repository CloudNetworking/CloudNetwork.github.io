{"meta":{"title":"CloudNetworking","subtitle":null,"description":null,"author":"John Doe","url":"http://CloudNetworking.cc"},"pages":[{"title":"Categories","date":"2017-02-07T13:03:53.172Z","updated":"2017-02-07T13:03:53.172Z","comments":true,"path":"categories/index.html","permalink":"http://CloudNetworking.cc/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-02-07T13:03:53.174Z","updated":"2017-02-07T13:03:53.174Z","comments":true,"path":"tags/index.html","permalink":"http://CloudNetworking.cc/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Struts2","slug":"Struts2","date":"2017-02-08T02:16:00.000Z","updated":"2017-02-08T07:37:45.511Z","comments":true,"path":"2017/02/08/Struts2/","link":"","permalink":"http://CloudNetworking.cc/2017/02/08/Struts2/","excerpt":"","text":"#测试页面 package com.qf.annotation4; import java.lang.annotation.Annotation; import java.lang.reflect.Method; public class Test { @DataBaseType(type=&quot;sqlserver&quot;) public void getDBConn() throws Exception{ Class clazz= Test.class; Method method = clazz. getDeclaredMethod(&quot;getDBConn&quot;, null); //得到当前方法的注解 Annotation annotation[] = method.getDeclaredAnnotations(); //System.out.println(annotation.length); for (Annotation annotation2 : annotation) { if (annotation2 instanceof DataBaseType ) { //向下转型--》强制转化 DataBaseType dataBaseType = (DataBaseType)annotation2; if (&quot;oracle&quot;.equalsIgnoreCase(dataBaseType.type())) { System.out.println(&quot;链接oracle&quot;); //链接oracle数据库的逻辑 }else if (&quot;mysql&quot;.equalsIgnoreCase(dataBaseType.type())) { System.out.println(&quot;链接mySql数据库&quot;); }else if (&quot;sqlserver&quot;.equalsIgnoreCase(dataBaseType.type())) { System.out.println(&quot;链接sqlServer数据库&quot;); } } } } public static void main(String[] args) throws Exception { new Test().getDBConn(); } } package com.qf.annotation4; import java.lang.annotation.Annotation; import java.lang.reflect.Method; public class Test { @DataBaseType(type=&quot;sqlserver&quot;) public void getDBConn() throws Exception{ Class clazz= Test.class; Method method = clazz. getDeclaredMethod(&quot;getDBConn&quot;, null); //得到当前方法的注解 Annotation annotation[] = method.getDeclaredAnnotations(); //System.out.println(annotation.length); for (Annotation annotation2 : annotation) { if (annotation2 instanceof DataBaseType ) { //向下转型--》强制转化 DataBaseType dataBaseType = (DataBaseType)annotation2; if (&quot;oracle&quot;.equalsIgnoreCase(dataBaseType.type())) { System.out.println(&quot;链接oracle&quot;); //链接oracle数据库的逻辑 }else if (&quot;mysql&quot;.equalsIgnoreCase(dataBaseType.type())) { System.out.println(&quot;链接mySql数据库&quot;); }else if (&quot;sqlserver&quot;.equalsIgnoreCase(dataBaseType.type())) { System.out.println(&quot;链接sqlServer数据库&quot;); } } } } public static void main(String[] args) throws Exception { new Test().getDBConn(); } }","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-02-07T14:22:24.007Z","updated":"2017-02-08T07:37:35.017Z","comments":true,"path":"2017/02/07/hello-world/","link":"","permalink":"http://CloudNetworking.cc/2017/02/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174package com.qf.dao;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import javax.enterprise.inject.New;import com.qf.utils.ConfigManager;/** * dao:data access object:数据访问对象 * 增删改通用 * 查询通用： select * from users,select uname from users where id=?; * @author liliting * 基本的操作数据库的工具类 */public class BaseDao &#123; Connection conn =null; PreparedStatement ps = null; ResultSet rSet =null; public Connection getConnection()&#123; String diver=ConfigManager.getInstance().getValue(\"jdbc_driver_class\"); String url=ConfigManager.getInstance().getValue(\"connection_url\"); String user=ConfigManager.getInstance().getValue(\"connection_user\"); String password=ConfigManager.getInstance().getValue(\"connection_password\"); try &#123; Class.forName(diver); conn = DriverManager.getConnection(url, user, password); return conn; &#125; catch (ClassNotFoundException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; return conn; &#125; //查询通用的方法 /** * select * from users; * select * from users where id=? and username=?; * ps.setInt(1,1001);//填充第一个占位符 * ps.setString(2,\"张三\"); * select count(*) from users; * sql语句带占位符 * Object[]params:填充第一个sql语句中带有的占位符 * @return */ //select * from users where username=? and password=? ; new Object[]&#123;\"admin\",\"admin\"&#125; public ResultSet executeQuery(String sql,Object[]params)&#123; conn = getConnection(); try &#123; ps = conn.prepareStatement(sql); //填充占位符 for (int i = 0; i &lt; params.length; i++) &#123; ps.setObject(i+1, params[i]); //ps.setObject(1,\"admin\"); //ps.setObject(2,\"admin\"); &#125; return ps.executeQuery(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;finally &#123; //closeAll(); 查询通用方法 不能再次关闭 &#125; return rSet; &#125; /** * insert into users values(?,?,?,?); new Object[]&#123;4,\"jinsanpang\",\"jbgsn\",18&#125;; * @param sql * @param params * @return */ public int executeUpdate(String sql,Object []params)&#123; conn = getConnection(); try &#123; ps= conn.prepareStatement(sql); //根据第二个参数填充第一个参数的占位符 for (int i = 0; i &lt; params.length; i++) &#123; ps.setObject(i+1, params[i]); &#125; return ps.executeUpdate();//返回sql语句影响的行数 &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125;finally &#123; closeAll(); &#125; return 0; &#125; //关闭资源 public void closeAll()&#123; if (rSet!=null) &#123; try &#123; rSet.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if (ps!=null) &#123; try &#123; ps.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if (conn!=null) &#123; try &#123; conn.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125; public static void main(String[] args) throws SQLException &#123; BaseDao dao=new BaseDao(); System.out.println(dao.getConnection()); //select * from users// ResultSet rSet= dao.executeQuery(\"select * from users\", new Object[]&#123;&#125;);// while(rSet.next())&#123;// System.out.println(rSet.getString(2));// &#125;rSet.close();// System.out.println(\"-----------\");// ResultSet rSet1= dao.executeQuery(\"select * from test where id=?\", new Object[]&#123;1&#125;);// while(rSet1.next())&#123;// System.out.println(rSet1.getString(2));// &#125;// // System.out.println(\"------------------\");// // ResultSet rSet2= dao.executeQuery(\"select count(*) from users\", new Object[]&#123;&#125;);// while(rSet2.next())&#123;// System.out.println(rSet2.getInt(1));// &#125;// // System.out.println(\"****************\");// String sql = \"insert into users values(?,?,?,?)\";// Object params[]=&#123;4,\"zhangsan\",\"zhangsan\",18&#125;;// if(dao.executeUpdate(sql, params)&gt;0)&#123;// System.out.println(\"插入成功\");// &#125;// System.out.println(\"********修改********\");// sql = \"update users set username=? where id=?\";// params=new Object[]&#123;\"lisi\",3&#125;;// if(dao.executeUpdate(sql, params)&gt;0)&#123;// System.out.println(\"修改成功\");// &#125;// // &#125; &#125; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}